{
  "info": {
    "_postman_id": "eagle-bank-api-complete-v3",
    "name": "Eagle Bank API - Complete Test Suite with Admin & All Account Types",
    "description": "Comprehensive REST API test collection for Eagle Bank covering all requirements from the Take Home Test v2 document.\n\nIncludes:\n- All core endpoints (Users, Accounts, Transactions)\n- Transfer feature with complete test coverage\n- Admin authentication and operations\n- All account types (CHECKING, SAVINGS, CREDIT) with examples\n- Authentication flows (Login, Refresh, Logout, Change Password)\n- Account status management (Active, Frozen, Closed)\n- Advanced analytics endpoints\n- Audit trail endpoints\n- Complete error scenarios with expected status codes\n- Full user lifecycle flows\n- Organized test scenarios for compliance testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080/api/v1",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id_2",
      "value": "",
      "type": "string"
    },
    {
      "key": "account_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "checking_account_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "savings_account_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "credit_account_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "source_account_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "target_account_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "transaction_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "transfer_reference",
      "value": "",
      "type": "string"
    },
    {
      "key": "auth_token_2",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Admin Setup & Authentication",
      "item": [
        {
          "name": "Login as Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"admin_token\", jsonData.token);",
                  "    pm.environment.set(\"admin_token\", jsonData.token);",
                  "    ",
                  "    pm.test(\"Admin login successful\", function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(jsonData).to.have.property('token');",
                  "        pm.expect(jsonData.user.role).to.eql('ADMIN');",
                  "    });",
                  "    ",
                  "    pm.test(\"Admin has correct email\", function () {",
                  "        pm.expect(jsonData.user.email).to.eql('admin@eaglebank.com');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"admin@eaglebank.com\",\n    \"password\": \"Admin123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Authenticates as the system administrator. The admin user is created automatically by DataInitializer on application startup."
          }
        },
        {
          "name": "Get High-Value Accounts (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Admin can view high-value accounts\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Returns array of accounts\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use admin token for this request",
                  "pm.request.headers.add({",
                  "    key: 'Authorization',",
                  "    value: 'Bearer ' + pm.collectionVariables.get('admin_token')",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/admin/accounts/high-value?threshold=10000",
              "host": ["{{base_url}}"],
              "path": ["admin", "accounts", "high-value"],
              "query": [
                {
                  "key": "threshold",
                  "value": "10000",
                  "description": "Minimum transaction amount to filter accounts"
                }
              ]
            },
            "description": "Admin endpoint to find accounts with transactions above specified threshold"
          }
        },
        {
          "name": "Get Dormant Accounts (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Admin can view dormant accounts\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Returns array of accounts\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use admin token for this request",
                  "pm.request.headers.add({",
                  "    key: 'Authorization',",
                  "    value: 'Bearer ' + pm.collectionVariables.get('admin_token')",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/admin/accounts/dormant?inactiveSince=2024-01-01T00:00:00",
              "host": ["{{base_url}}"],
              "path": ["admin", "accounts", "dormant"],
              "query": [
                {
                  "key": "inactiveSince",
                  "value": "2024-01-01T00:00:00",
                  "description": "Date to check for last activity (ISO 8601 format)"
                }
              ]
            },
            "description": "Admin endpoint to find accounts with no transactions since specified date"
          }
        },
        {
          "name": "Get Audit Logs (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Admin can view audit logs\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Returns paginated audit logs\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('content');",
                  "    pm.expect(jsonData).to.have.property('totalElements');",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use admin token for this request",
                  "pm.request.headers.add({",
                  "    key: 'Authorization',",
                  "    value: 'Bearer ' + pm.collectionVariables.get('admin_token')",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/audit?page=0&size=20",
              "host": ["{{base_url}}"],
              "path": ["audit"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "20"
                }
              ]
            },
            "description": "Admin endpoint to view system audit logs"
          }
        }
      ],
      "description": "Admin authentication and administrative operations"
    },
    {
      "name": "2. User Setup & Authentication",
      "item": [
        {
          "name": "Create Test User 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"user_id\", jsonData.id);",
                  "    ",
                  "    pm.test(\"User created successfully\", function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.expect(jsonData.email).to.eql(\"transfer.user1@example.com\");",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique email to avoid conflicts",
                  "const timestamp = Date.now();",
                  "pm.environment.set(\"test_email_1\", `transfer.user1.${timestamp}@example.com`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"transfer.user1@example.com\",\n    \"password\": \"SecurePass123!\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"phoneNumber\": \"+1234567890\",\n    \"address\": \"123 Main Street, New York, NY 10001\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            },
            "description": "Creates the first test user for transfer scenarios"
          }
        },
        {
          "name": "Create Test User 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"user_id_2\", jsonData.id);",
                  "    ",
                  "    pm.test(\"Second user created successfully\", function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.expect(jsonData.email).to.eql(\"transfer.user2@example.com\");",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"transfer.user2@example.com\",\n    \"password\": \"SecurePass456!\",\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Smith\",\n    \"phoneNumber\": \"+9876543210\",\n    \"address\": \"456 Oak Avenue, Los Angeles, CA 90001\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            },
            "description": "Creates the second test user for transfer scenarios"
          }
        },
        {
          "name": "Login as User 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"auth_token\", jsonData.token);",
                  "    pm.collectionVariables.set(\"refresh_token\", jsonData.refreshToken);",
                  "    pm.environment.set(\"auth_token\", jsonData.token);",
                  "    ",
                  "    pm.test(\"Login successful for User 1\", function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(jsonData).to.have.property('token');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"transfer.user1@example.com\",\n    \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Login as User 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"auth_token_2\", jsonData.token);",
                  "    pm.environment.set(\"auth_token_2\", jsonData.token);",
                  "    ",
                  "    pm.test(\"Login successful for User 2\", function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(jsonData).to.have.property('token');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"transfer.user2@example.com\",\n    \"password\": \"SecurePass456!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        }
      ],
      "description": "Setup test users for various testing scenarios"
    },
    {
      "name": "3. Account Type Examples",
      "item": [
        {
          "name": "Create CHECKING Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"checking_account_id\", jsonData.id);",
                  "    pm.collectionVariables.set(\"source_account_id\", jsonData.id);",
                  "    pm.collectionVariables.set(\"account_id\", jsonData.id);",
                  "    ",
                  "    pm.test(\"CHECKING account created\", function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(jsonData.accountType).to.eql('CHECKING');",
                  "        pm.expect(jsonData.balance).to.eql(5000);",
                  "    });",
                  "    ",
                  "    pm.test(\"CHECKING account has no credit limit\", function () {",
                  "        pm.expect(jsonData.creditLimit).to.be.null;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountType\": \"CHECKING\",\n    \"accountName\": \"John's Primary Checking Account\",\n    \"initialBalance\": 5000.00\n}"
            },
            "url": {
              "raw": "{{base_url}}/accounts",
              "host": ["{{base_url}}"],
              "path": ["accounts"]
            },
            "description": "CHECKING account: Standard account for daily transactions. Supports overdrafts, no minimum balance requirement, no interest."
          }
        },
        {
          "name": "Create SAVINGS Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"savings_account_id\", jsonData.id);",
                  "    ",
                  "    pm.test(\"SAVINGS account created\", function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(jsonData.accountType).to.eql('SAVINGS');",
                  "        pm.expect(jsonData.balance).to.eql(10000);",
                  "    });",
                  "    ",
                  "    pm.test(\"SAVINGS account properties\", function () {",
                  "        pm.expect(jsonData.creditLimit).to.be.null;",
                  "        pm.expect(jsonData.status).to.eql('ACTIVE');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountType\": \"SAVINGS\",\n    \"accountName\": \"John's High-Yield Savings\",\n    \"initialBalance\": 10000.00\n}"
            },
            "url": {
              "raw": "{{base_url}}/accounts",
              "host": ["{{base_url}}"],
              "path": ["accounts"]
            },
            "description": "SAVINGS account: Earns interest, minimum balance requirement of $500, limited withdrawals per month."
          }
        },
        {
          "name": "Create CREDIT Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"credit_account_id\", jsonData.id);",
                  "    ",
                  "    pm.test(\"CREDIT account created\", function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(jsonData.accountType).to.eql('CREDIT');",
                  "        pm.expect(jsonData.balance).to.eql(0);",
                  "    });",
                  "    ",
                  "    pm.test(\"CREDIT account has credit limit\", function () {",
                  "        pm.expect(jsonData.creditLimit).to.eql(5000);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountType\": \"CREDIT\",\n    \"accountName\": \"John's Credit Line\",\n    \"initialBalance\": 0,\n    \"creditLimit\": 5000.00\n}"
            },
            "url": {
              "raw": "{{base_url}}/accounts",
              "host": ["{{base_url}}"],
              "path": ["accounts"]
            },
            "description": "CREDIT account: Line of credit with specified limit. Balance starts at 0, can go negative up to credit limit. Withdrawals increase debt, deposits reduce debt."
          }
        },
        {
          "name": "Create Second User's SAVINGS Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"target_account_id\", jsonData.id);",
                  "    ",
                  "    pm.test(\"Account created for User 2\", function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(jsonData.balance).to.eql(1000);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Switch to User 2's token",
                  "pm.request.headers.add({",
                  "    key: 'Authorization',",
                  "    value: 'Bearer ' + pm.collectionVariables.get('auth_token_2')",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token_2}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountType\": \"SAVINGS\",\n    \"accountName\": \"Jane's Emergency Fund\",\n    \"initialBalance\": 1000.00\n}"
            },
            "url": {
              "raw": "{{base_url}}/accounts",
              "host": ["{{base_url}}"],
              "path": ["accounts"]
            },
            "description": "Creates a savings account for the second user (for transfer testing)"
          }
        }
      ],
      "description": "Examples of creating all three account types with their specific properties and behaviors"
    },
    {
      "name": "4. Account Type Specific Tests",
      "item": [
        {
          "name": "CHECKING Account Tests",
          "item": [
            {
              "name": "Test CHECKING Overdraft",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// CHECKING accounts may allow overdrafts depending on business rules",
                      "pm.test(\"Overdraft attempt processed\", function () {",
                      "    // Expect either success (if overdraft allowed) or 422 (if not)",
                      "    pm.expect([201, 422]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 422) {",
                      "    pm.test(\"Overdraft protection message\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData.message.toLowerCase()).to.include('insufficient');",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"transactionType\": \"WITHDRAWAL\",\n    \"amount\": 6000.00,\n    \"description\": \"Test overdraft on checking account\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{checking_account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{checking_account_id}}", "transactions"]
                },
                "description": "Test overdraft behavior on CHECKING account"
              }
            },
            {
              "name": "Deposit to CHECKING",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Deposit to CHECKING successful\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var jsonData = pm.response.json();",
                      "pm.test(\"Balance updated correctly\", function () {",
                      "    pm.expect(jsonData.balanceAfter).to.be.above(5000);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"transactionType\": \"DEPOSIT\",\n    \"amount\": 2500.00,\n    \"description\": \"Paycheck deposit\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{checking_account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{checking_account_id}}", "transactions"]
                }
              }
            }
          ]
        },
        {
          "name": "SAVINGS Account Tests",
          "item": [
            {
              "name": "Test SAVINGS Minimum Balance",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Withdrawal respects minimum balance\", function () {",
                      "    // Either successful or rejected due to minimum balance",
                      "    pm.expect([201, 422]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 422) {",
                      "    pm.test(\"Minimum balance error message\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData.message.toLowerCase()).to.include.oneOf(['minimum', 'insufficient']);",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"transactionType\": \"WITHDRAWAL\",\n    \"amount\": 9600.00,\n    \"description\": \"Test minimum balance on savings\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{savings_account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{savings_account_id}}", "transactions"]
                },
                "description": "Test minimum balance requirement on SAVINGS account (typically $500)"
              }
            },
            {
              "name": "Get SAVINGS Account Details",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Can retrieve savings account details\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "var jsonData = pm.response.json();",
                      "pm.test(\"Savings account shows correct details\", function () {",
                      "    pm.expect(jsonData).to.have.property('balance');",
                      "    pm.expect(jsonData.accountType).to.eql('SAVINGS');",
                      "    pm.expect(jsonData.status).to.eql('ACTIVE');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/accounts/{{savings_account_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{savings_account_id}}"]
                },
                "description": "Retrieve SAVINGS account details to verify balance and account status"
              }
            }
          ]
        },
        {
          "name": "CREDIT Account Tests",
          "item": [
            {
              "name": "Withdrawal from CREDIT (Increase Debt)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Credit withdrawal successful\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var jsonData = pm.response.json();",
                      "pm.test(\"Credit balance goes negative (debt)\", function () {",
                      "    pm.expect(jsonData.balanceAfter).to.be.below(0);",
                      "});",
                      "",
                      "pm.test(\"Transaction type is WITHDRAWAL\", function () {",
                      "    pm.expect(jsonData.type).to.eql('WITHDRAWAL');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"transactionType\": \"WITHDRAWAL\",\n    \"amount\": 1500.00,\n    \"description\": \"Credit card purchase\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{credit_account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{credit_account_id}}", "transactions"]
                },
                "description": "Withdrawal from CREDIT account increases debt (negative balance)"
              }
            },
            {
              "name": "Test Credit Limit",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Credit limit enforced\", function () {",
                      "    pm.response.to.have.status(422);",
                      "});",
                      "",
                      "pm.test(\"Credit limit error message\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include.oneOf(['credit limit', 'insufficient', 'exceeded']);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"transactionType\": \"WITHDRAWAL\",\n    \"amount\": 6000.00,\n    \"description\": \"Attempt to exceed credit limit\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{credit_account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{credit_account_id}}", "transactions"]
                },
                "description": "Test that withdrawals beyond credit limit are rejected"
              }
            },
            {
              "name": "Payment to CREDIT (Reduce Debt)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Credit payment successful\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var jsonData = pm.response.json();",
                      "pm.test(\"Payment reduces debt\", function () {",
                      "    pm.expect(jsonData.type).to.eql('DEPOSIT');",
                      "    // Balance should be less negative (closer to 0)",
                      "    pm.expect(jsonData.balanceAfter).to.be.above(-1500);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"transactionType\": \"DEPOSIT\",\n    \"amount\": 500.00,\n    \"description\": \"Credit card payment\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{credit_account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{credit_account_id}}", "transactions"]
                },
                "description": "Deposit to CREDIT account reduces debt"
              }
            },
            {
              "name": "Overpayment to CREDIT (Positive Balance)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Overpayment allowed\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var jsonData = pm.response.json();",
                      "pm.test(\"Credit can have positive balance\", function () {",
                      "    pm.expect(jsonData.balanceAfter).to.be.above(0);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"transactionType\": \"DEPOSIT\",\n    \"amount\": 3000.00,\n    \"description\": \"Large credit card payment (overpayment)\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{credit_account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{credit_account_id}}", "transactions"]
                },
                "description": "CREDIT accounts can have positive balance from overpayments"
              }
            }
          ]
        }
      ],
      "description": "Test account type-specific behaviors and business rules"
    },
    {
      "name": "5. Transfer Feature",
      "item": [
        {
          "name": "Transfer Between Account Types",
          "item": [
            {
              "name": "CHECKING to SAVINGS Transfer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Transfer between different account types\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var jsonData = pm.response.json();",
                      "pm.test(\"Transfer details correct\", function () {",
                      "    pm.expect(jsonData.amount).to.eql(500);",
                      "    pm.expect(jsonData.status).to.eql('COMPLETED');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{checking_account_id}}\",\n    \"targetAccountId\": \"{{savings_account_id}}\",\n    \"amount\": 500.00,\n    \"description\": \"Monthly savings transfer\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Transfer from CHECKING to SAVINGS account"
              }
            },
            {
              "name": "SAVINGS to CREDIT Transfer (Pay Credit)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Can transfer to CREDIT account\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var jsonData = pm.response.json();",
                      "pm.test(\"Payment to credit processed\", function () {",
                      "    pm.expect(jsonData.targetTransaction.type).to.eql('TRANSFER');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{savings_account_id}}\",\n    \"targetAccountId\": \"{{credit_account_id}}\",\n    \"amount\": 200.00,\n    \"description\": \"Credit card payment from savings\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Transfer from SAVINGS to CREDIT to pay down debt"
              }
            },
            {
              "name": "CREDIT to CHECKING Transfer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// This tests if credit accounts with positive balance can transfer",
                      "pm.test(\"Transfer from CREDIT account\", function () {",
                      "    // May succeed if credit has positive balance, or fail if negative",
                      "    pm.expect([201, 422]).to.include(pm.response.code);",
                      "});",
                      "",
                      "if (pm.response.code === 422) {",
                      "    pm.test(\"Cannot transfer from negative credit balance\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData.message.toLowerCase()).to.include('insufficient');",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{credit_account_id}}\",\n    \"targetAccountId\": \"{{checking_account_id}}\",\n    \"amount\": 100.00,\n    \"description\": \"Transfer credit overpayment to checking\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test transfer from CREDIT account (only works with positive balance)"
              }
            }
          ]
        },
        {
          "name": "Cross-User Transfers",
          "item": [
            {
              "name": "Transfer to Another User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Cross-user transfer successful\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var jsonData = pm.response.json();",
                      "pm.test(\"Transfer creates proper records\", function () {",
                      "    pm.expect(jsonData.sourceTransaction).to.exist;",
                      "    pm.expect(jsonData.targetTransaction).to.exist;",
                      "    pm.expect(jsonData.transferReference).to.include('TRF');",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"transfer_reference\", jsonData.transferReference);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": 750.00,\n    \"description\": \"Payment to Jane Smith for services\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Transfer money to another user's account"
              }
            }
          ]
        }
      ],
      "description": "Transfer operations between different account types and users"
    },
    {
      "name": "6. Core Operations",
      "item": [
        {
          "name": "Users",
          "item": [
            {
              "name": "Get User Profile",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/users/{{user_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["users", "{{user_id}}"]
                }
              }
            },
            {
              "name": "Update User",
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstName\": \"John Updated\",\n    \"phoneNumber\": \"+1234567899\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/users/{{user_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["users", "{{user_id}}"]
                }
              }
            }
          ]
        },
        {
          "name": "Accounts",
          "item": [
            {
              "name": "Get All User Accounts",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/accounts",
                  "host": ["{{base_url}}"],
                  "path": ["accounts"]
                }
              }
            },
            {
              "name": "Get Account by ID",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/accounts/{{account_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{account_id}}"]
                }
              }
            },
            {
              "name": "Update Account Status",
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"status\": \"FROZEN\",\n    \"statusChangeReason\": \"Suspicious activity detected\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{account_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{account_id}}"]
                }
              }
            }
          ]
        },
        {
          "name": "Transactions",
          "item": [
            {
              "name": "Get Transaction History",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/accounts/{{account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{account_id}}", "transactions"]
                }
              }
            },
            {
              "name": "Search Transactions",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"type\": \"TRANSFER\",\n    \"minAmount\": 100.00,\n    \"maxAmount\": 1000.00\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{account_id}}/transactions/search",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{account_id}}", "transactions", "search"]
                }
              }
            }
          ]
        }
      ]
    },
    {
      "name": "7. Analytics & Metrics",
      "item": [
        {
          "name": "Get Account Metrics (Admin)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use admin token",
                  "pm.request.headers.add({",
                  "    key: 'Authorization',",
                  "    value: 'Bearer ' + pm.collectionVariables.get('admin_token')",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/metrics/account",
              "host": ["{{base_url}}"],
              "path": ["metrics", "account"]
            },
            "description": "Get general account metrics (requires admin privileges)"
          }
        },
        {
          "name": "Get System Metrics (Admin)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use admin token",
                  "pm.request.headers.add({",
                  "    key: 'Authorization',",
                  "    value: 'Bearer ' + pm.collectionVariables.get('admin_token')",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/metrics",
              "host": ["{{base_url}}"],
              "path": ["metrics"]
            },
            "description": "Get system-wide metrics (requires admin privileges)"
          }
        }
      ]
    },
    {
      "name": "8. Complete Requirements Coverage",
      "item": [
        {
          "name": "User Deletion Tests",
          "item": [
            {
              "name": "Create User for Deletion",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    var jsonData = pm.response.json();",
                      "    pm.collectionVariables.set(\"delete_user_id\", jsonData.id);",
                      "    ",
                      "    pm.test(\"User created for deletion test\", function () {",
                      "        pm.response.to.have.status(201);",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"delete.test@example.com\",\n    \"password\": \"SecurePass123!\",\n    \"firstName\": \"Delete\",\n    \"lastName\": \"Test\",\n    \"phoneNumber\": \"+1234567890\",\n    \"address\": \"123 Delete Street\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/users",
                  "host": ["{{base_url}}"],
                  "path": ["users"]
                },
                "description": "Create a user specifically for deletion testing"
              }
            },
            {
              "name": "Login as Delete User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    var jsonData = pm.response.json();",
                      "    pm.collectionVariables.set(\"delete_user_token\", jsonData.token);",
                      "    ",
                      "    pm.test(\"Login successful for delete user\", function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"delete.test@example.com\",\n    \"password\": \"SecurePass123!\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/login",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "login"]
                }
              }
            },
            {
              "name": "Delete User Without Accounts (Success)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"User deleted successfully\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.request.headers.add({",
                      "    key: 'Authorization',",
                      "    value: 'Bearer ' + pm.collectionVariables.get('delete_user_token')",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{delete_user_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/users/{{delete_user_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["users", "{{delete_user_id}}"]
                },
                "description": "Delete user without any bank accounts - should succeed"
              }
            },
            {
              "name": "Delete User With Accounts (Conflict)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Cannot delete user with accounts\", function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test(\"Error message about accounts\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('account');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/users/{{user_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["users", "{{user_id}}"]
                },
                "description": "Try to delete user who has bank accounts - should fail with 409"
              }
            },
            {
              "name": "Delete Another User (Forbidden)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Cannot delete another user\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test(\"Forbidden error message\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.error).to.eql('Forbidden');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/users/{{user_id_2}}",
                  "host": ["{{base_url}}"],
                  "path": ["users", "{{user_id_2}}"]
                },
                "description": "Try to delete another user's account - should fail with 403"
              }
            },
            {
              "name": "Delete Non-Existent User (Not Found)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"User not found\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Not found error message\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('not found');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/users/01234567-89ab-cdef-0123-456789abcdef",
                  "host": ["{{base_url}}"],
                  "path": ["users", "01234567-89ab-cdef-0123-456789abcdef"]
                },
                "description": "Try to delete non-existent user - should fail with 404"
              }
            }
          ]
        },
        {
          "name": "Account Deletion Tests",
          "item": [
            {
              "name": "Create Account for Deletion",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    var jsonData = pm.response.json();",
                      "    pm.collectionVariables.set(\"delete_account_id\", jsonData.id);",
                      "    ",
                      "    pm.test(\"Account created for deletion\", function () {",
                      "        pm.response.to.have.status(201);",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"accountType\": \"CHECKING\",\n    \"accountName\": \"Account to Delete\",\n    \"initialBalance\": 100.00\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts",
                  "host": ["{{base_url}}"],
                  "path": ["accounts"]
                }
              }
            },
            {
              "name": "Delete Own Account (Success)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Account deleted successfully\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/accounts/{{delete_account_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{delete_account_id}}"]
                },
                "description": "Delete own account - should succeed"
              }
            },
            {
              "name": "Delete Another User's Account (Forbidden)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Cannot delete another user's account\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test(\"Forbidden error message\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.error).to.eql('Forbidden');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/accounts/{{target_account_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{target_account_id}}"]
                },
                "description": "Try to delete another user's account - should fail with 403"
              }
            },
            {
              "name": "Delete Non-Existent Account (Not Found)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Account not found\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Not found error message\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('not found');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/accounts/01234567-89ab-cdef-0123-456789abcdef",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "01234567-89ab-cdef-0123-456789abcdef"]
                },
                "description": "Try to delete non-existent account - should fail with 404"
              }
            }
          ]
        },
        {
          "name": "Transaction Error Scenarios",
          "item": [
            {
              "name": "Create Small Balance Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    var jsonData = pm.response.json();",
                      "    pm.collectionVariables.set(\"small_balance_account_id\", jsonData.id);",
                      "    ",
                      "    pm.test(\"Small balance account created\", function () {",
                      "        pm.response.to.have.status(201);",
                      "        pm.expect(jsonData.balance).to.eql(50);",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"accountType\": \"CHECKING\",\n    \"accountName\": \"Low Balance Test Account\",\n    \"initialBalance\": 50.00\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts",
                  "host": ["{{base_url}}"],
                  "path": ["accounts"]
                }
              }
            },
            {
              "name": "Withdrawal With Insufficient Funds",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Insufficient funds error\", function () {",
                      "    pm.response.to.have.status(422);",
                      "});",
                      "",
                      "pm.test(\"Error message about insufficient funds\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('insufficient');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"transactionType\": \"WITHDRAWAL\",\n    \"amount\": 100.00,\n    \"description\": \"Withdrawal exceeding balance\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{small_balance_account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{small_balance_account_id}}", "transactions"]
                },
                "description": "Attempt withdrawal with insufficient funds - should fail with 422"
              }
            },
            {
              "name": "Create Transaction Missing Fields",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Bad request for missing fields\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Validation error message\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('validationErrors');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"transactionType\": \"DEPOSIT\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{account_id}}", "transactions"]
                },
                "description": "Create transaction with missing required fields - should fail with 400"
              }
            },
            {
              "name": "Transaction on Another User's Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Cannot create transaction on another user's account\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test(\"Forbidden error message\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.error).to.eql('Forbidden');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"transactionType\": \"DEPOSIT\",\n    \"amount\": 100.00,\n    \"description\": \"Unauthorized deposit attempt\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{target_account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{target_account_id}}", "transactions"]
                },
                "description": "Try to create transaction on another user's account - should fail with 403"
              }
            },
            {
              "name": "Transaction on Non-Existent Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Account not found\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Not found error message\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('not found');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"transactionType\": \"DEPOSIT\",\n    \"amount\": 100.00,\n    \"description\": \"Deposit to non-existent account\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/01234567-89ab-cdef-0123-456789abcdef/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "01234567-89ab-cdef-0123-456789abcdef", "transactions"]
                },
                "description": "Try to create transaction on non-existent account - should fail with 404"
              }
            }
          ]
        },
        {
          "name": "Get Single Transaction Tests",
          "item": [
            {
              "name": "Create Transaction for Testing",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    var jsonData = pm.response.json();",
                      "    pm.collectionVariables.set(\"test_transaction_id\", jsonData.id);",
                      "    ",
                      "    pm.test(\"Transaction created for testing\", function () {",
                      "        pm.response.to.have.status(201);",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"transactionType\": \"DEPOSIT\",\n    \"amount\": 250.00,\n    \"description\": \"Test transaction for single fetch\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{account_id}}", "transactions"]
                }
              }
            },
            {
              "name": "Get Transaction on Own Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Can retrieve own transaction\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Transaction details correct\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData.amount).to.eql(250);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/accounts/{{account_id}}/transactions/{{test_transaction_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{account_id}}", "transactions", "{{test_transaction_id}}"]
                },
                "description": "Get single transaction on own account - should succeed"
              }
            },
            {
              "name": "Get Transaction on Another User's Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Cannot get transaction on another user's account\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test(\"Forbidden error message\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.error).to.eql('Forbidden');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/accounts/{{target_account_id}}/transactions/{{test_transaction_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{target_account_id}}", "transactions", "{{test_transaction_id}}"]
                },
                "description": "Try to get transaction on another user's account - should fail with 403"
              }
            },
            {
              "name": "Get Non-Existent Transaction",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Transaction not found\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Not found error message\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('not found');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/accounts/{{account_id}}/transactions/01234567-89ab-cdef-0123-456789abcdef",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{account_id}}", "transactions", "01234567-89ab-cdef-0123-456789abcdef"]
                },
                "description": "Try to get non-existent transaction - should fail with 404"
              }
            },
            {
              "name": "Get Transaction Against Wrong Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Transaction not found on wrong account\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Not found error message\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('not found');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/accounts/{{checking_account_id}}/transactions/{{test_transaction_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{checking_account_id}}", "transactions", "{{test_transaction_id}}"]
                },
                "description": "Try to get transaction against wrong account - should fail with 404"
              }
            }
          ]
        },
        {
          "name": "Authentication Tests",
          "item": [
            {
              "name": "Refresh Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Token refreshed successfully\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"New tokens received\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('token');",
                      "    pm.expect(jsonData).to.have.property('refreshToken');",
                      "    ",
                      "    // Update tokens",
                      "    pm.collectionVariables.set(\"auth_token\", jsonData.token);",
                      "    pm.collectionVariables.set(\"refresh_token\", jsonData.refreshToken);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"refreshToken\": \"{{refresh_token}}\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/refresh",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "refresh"]
                },
                "description": "Refresh authentication token using refresh token"
              }
            },
            {
              "name": "Logout",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Logout successful\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Logout message received\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('logout');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/auth/logout",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "logout"]
                },
                "description": "Logout and invalidate token"
              }
            },
            {
              "name": "Change Password",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Password changed successfully\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Success message received\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('password');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"currentPassword\": \"SecurePass123!\",\n    \"newPassword\": \"NewSecurePass456!\",\n    \"confirmPassword\": \"NewSecurePass456!\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/change-password",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "change-password"]
                },
                "description": "Change user password"
              }
            }
          ]
        }
      ],
      "description": "Complete test coverage for all requirements from the Take Home test document"
    }
  ]
}