{
  "info": {
    "_postman_id": "eagle-bank-api-complete-v2",
    "name": "Eagle Bank API - Complete Test Suite with Transfers",
    "description": "Comprehensive REST API test collection for Eagle Bank covering all requirements from the Take Home Test v2.\n\nIncludes:\n- All core endpoints (Users, Accounts, Transactions)\n- Transfer feature with complete test coverage\n- Authentication flows (Login, Refresh, Logout, Change Password)\n- Account status management (Active, Frozen, Closed)\n- Advanced analytics endpoints\n- Admin operations\n- Audit trail endpoints\n- Complete error scenarios with expected status codes\n- Full user lifecycle flows\n- Organized test scenarios for compliance testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080/api/v1",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id_2",
      "value": "",
      "type": "string"
    },
    {
      "key": "account_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "source_account_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "target_account_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "transaction_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "transfer_reference",
      "value": "",
      "type": "string"
    },
    {
      "key": "auth_token_2",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Setup & Authentication",
      "item": [
        {
          "name": "Create Test User 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"user_id\", jsonData.id);",
                  "    ",
                  "    pm.test(\"User created successfully\", function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.expect(jsonData.email).to.eql(\"transfer.user1@example.com\");",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique email to avoid conflicts",
                  "const timestamp = Date.now();",
                  "pm.environment.set(\"test_email_1\", `transfer.user1.${timestamp}@example.com`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"transfer.user1@example.com\",\n    \"password\": \"SecurePass123!\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"phoneNumber\": \"+1234567890\",\n    \"address\": \"123 Main Street, New York, NY 10001\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            },
            "description": "Creates the first test user for transfer scenarios"
          }
        },
        {
          "name": "Create Test User 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"user_id_2\", jsonData.id);",
                  "    ",
                  "    pm.test(\"Second user created successfully\", function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.expect(jsonData.email).to.eql(\"transfer.user2@example.com\");",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"transfer.user2@example.com\",\n    \"password\": \"SecurePass456!\",\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Smith\",\n    \"phoneNumber\": \"+9876543210\",\n    \"address\": \"456 Oak Avenue, Los Angeles, CA 90001\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            },
            "description": "Creates the second test user for transfer scenarios"
          }
        },
        {
          "name": "Login as User 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"auth_token\", jsonData.token);",
                  "    pm.collectionVariables.set(\"refresh_token\", jsonData.refreshToken);",
                  "    ",
                  "    pm.test(\"Login successful for User 1\", function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(jsonData).to.have.property('token');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"transfer.user1@example.com\",\n    \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Login as User 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"auth_token_2\", jsonData.token);",
                  "    ",
                  "    pm.test(\"Login successful for User 2\", function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(jsonData).to.have.property('token');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"transfer.user2@example.com\",\n    \"password\": \"SecurePass456!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Create Account for User 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"source_account_id\", jsonData.id);",
                  "    pm.collectionVariables.set(\"account_id\", jsonData.id);",
                  "    ",
                  "    pm.test(\"Account created for User 1\", function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(jsonData.balance).to.eql(5000);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountType\": \"CHECKING\",\n    \"accountName\": \"John's Checking Account\",\n    \"initialBalance\": 5000.00\n}"
            },
            "url": {
              "raw": "{{base_url}}/accounts",
              "host": ["{{base_url}}"],
              "path": ["accounts"]
            }
          }
        },
        {
          "name": "Create Account for User 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"target_account_id\", jsonData.id);",
                  "    ",
                  "    pm.test(\"Account created for User 2\", function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(jsonData.balance).to.eql(1000);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Switch to User 2's token",
                  "pm.request.headers.add({",
                  "    key: 'Authorization',",
                  "    value: 'Bearer ' + pm.collectionVariables.get('auth_token_2')",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token_2}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accountType\": \"SAVINGS\",\n    \"accountName\": \"Jane's Savings Account\",\n    \"initialBalance\": 1000.00\n}"
            },
            "url": {
              "raw": "{{base_url}}/accounts",
              "host": ["{{base_url}}"],
              "path": ["accounts"]
            }
          }
        }
      ],
      "description": "Setup test users and accounts for transfer testing"
    },
    {
      "name": "2. Transfer Feature",
      "item": [
        {
          "name": "Successful Transfer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Transfer created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Transfer has required fields\", function () {",
                  "    pm.expect(jsonData).to.have.property('transferReference');",
                  "    pm.expect(jsonData).to.have.property('sourceTransaction');",
                  "    pm.expect(jsonData).to.have.property('targetTransaction');",
                  "    pm.expect(jsonData.status).to.eql('COMPLETED');",
                  "});",
                  "",
                  "pm.test(\"Transfer amount is correct\", function () {",
                  "    pm.expect(jsonData.amount).to.eql(500);",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"transfer_reference\", jsonData.transferReference);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": 500.00,\n    \"description\": \"Test transfer payment\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/transfers",
              "host": ["{{base_url}}"],
              "path": ["transfers"]
            },
            "description": "Creates a successful transfer between two accounts"
          }
        },
        {
          "name": "Transfer with Description",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Transfer with description successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Description is included\", function () {",
                  "    pm.expect(jsonData.description).to.include('Monthly rent payment');",
                  "    pm.expect(jsonData.sourceTransaction.description).to.include('Monthly rent payment');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": 250.00,\n    \"description\": \"Monthly rent payment for December 2024\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/transfers",
              "host": ["{{base_url}}"],
              "path": ["transfers"]
            },
            "description": "Transfer with a custom description"
          }
        },
        {
          "name": "Large Amount Transfer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Large transfer successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Large amount handled correctly\", function () {",
                  "    pm.expect(jsonData.amount).to.eql(2000);",
                  "    pm.expect(jsonData.sourceTransaction.balanceAfter).to.be.below(3000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": 2000.00,\n    \"description\": \"Large payment transfer\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/transfers",
              "host": ["{{base_url}}"],
              "path": ["transfers"]
            },
            "description": "Transfer a large amount to test precision handling"
          }
        }
      ],
      "description": "Basic transfer operations and examples"
    },
    {
      "name": "3. Transfer Test Scenarios",
      "item": [
        {
          "name": "✅ Happy Path Tests",
          "item": [
            {
              "name": "Basic Transfer Between Accounts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Basic transfer successful\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Transfer completes with COMPLETED status\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.status).to.eql('COMPLETED');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": 100.00\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test: Basic transfer should succeed with valid accounts and sufficient funds"
              }
            },
            {
              "name": "Transfer to Another User's Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Can transfer to another user's account\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Cross-user transfer completes\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.sourceAccountId).to.eql(pm.collectionVariables.get('source_account_id'));",
                      "    pm.expect(jsonData.targetAccountId).to.eql(pm.collectionVariables.get('target_account_id'));",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": 150.00,\n    \"description\": \"Payment to another user\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test: Users can transfer to accounts they don't own"
              }
            },
            {
              "name": "Multiple Sequential Transfers",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Sequential transfer successful\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Each transfer gets unique reference\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.transferReference).to.include('TRF');",
                      "    pm.expect(jsonData.transferReference).to.not.eql(pm.collectionVariables.get('transfer_reference'));",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": 50.00,\n    \"description\": \"Sequential transfer test\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test: Multiple transfers can be made sequentially"
              }
            }
          ]
        },
        {
          "name": "❌ Validation Tests",
          "item": [
            {
              "name": "Transfer with Zero Amount",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Zero amount transfer rejected\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message for zero amount\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.validationErrors.amount).to.include('positive');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": 0.00\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test: Transfer with zero amount should be rejected with 400 Bad Request"
              }
            },
            {
              "name": "Transfer with Negative Amount",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Negative amount transfer rejected\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message for negative amount\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.validationErrors.amount).to.include('positive');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": -100.00\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test: Transfer with negative amount should be rejected with 400 Bad Request"
              }
            },
            {
              "name": "Transfer to Same Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Same account transfer rejected\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message for same account\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('different');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{source_account_id}}\",\n    \"amount\": 100.00\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test: Transfer to same account should be rejected with 400 Bad Request"
              }
            },
            {
              "name": "Transfer with Invalid Account IDs",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Invalid account ID rejected\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Error message for not found\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('not found');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"00000000-0000-0000-0000-000000000000\",\n    \"targetAccountId\": \"11111111-1111-1111-1111-111111111111\",\n    \"amount\": 100.00\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test: Transfer with non-existent account IDs should return 404 Not Found"
              }
            }
          ]
        },
        {
          "name": "🔒 Authorization Tests",
          "item": [
            {
              "name": "Transfer Without Authentication",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Unauthenticated transfer rejected\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Returns unauthorized error\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.error).to.include('Unauthorized');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": 100.00\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test: Transfer without authentication should return 401 Unauthorized"
              }
            },
            {
              "name": "Transfer from Unowned Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Transfer from unowned account rejected\", function () {",
                      "    pm.response.to.have.status(403);",
                      "});",
                      "",
                      "pm.test(\"Returns forbidden error\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('not authorized');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{target_account_id}}\",\n    \"targetAccountId\": \"{{source_account_id}}\",\n    \"amount\": 100.00,\n    \"description\": \"Unauthorized transfer attempt\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test: User cannot transfer from an account they don't own - returns 403 Forbidden"
              }
            }
          ]
        },
        {
          "name": "💰 Business Logic Tests",
          "item": [
            {
              "name": "Transfer with Insufficient Funds",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Insufficient funds transfer rejected\", function () {",
                      "    pm.response.to.have.status(422);",
                      "});",
                      "",
                      "pm.test(\"Returns insufficient funds error\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('insufficient');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": 999999.00,\n    \"description\": \"Transfer exceeding balance\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test: Transfer with insufficient funds should return 422 Unprocessable Entity"
              }
            },
            {
              "name": "Setup - Freeze Source Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Account frozen successfully\", function () {",
                      "    pm.response.to.have.status(200);",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.status).to.eql('FROZEN');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"status\": \"FROZEN\",\n    \"statusChangeReason\": \"Testing frozen account transfers\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{source_account_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{source_account_id}}"]
                },
                "description": "Setup: Freeze the source account for testing"
              }
            },
            {
              "name": "Transfer from Frozen Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Transfer from frozen account rejected\", function () {",
                      "    pm.response.to.have.status(409);",
                      "});",
                      "",
                      "pm.test(\"Returns account status error\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message.toLowerCase()).to.include('cannot transfer');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": 50.00,\n    \"description\": \"Transfer from frozen account\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test: Transfer from frozen account should return 409 Conflict"
              }
            },
            {
              "name": "Cleanup - Unfreeze Source Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Account reactivated\", function () {",
                      "    pm.response.to.have.status(200);",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.status).to.eql('ACTIVE');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"status\": \"ACTIVE\",\n    \"statusChangeReason\": \"Test completed\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{source_account_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{source_account_id}}"]
                },
                "description": "Cleanup: Reactivate the account after testing"
              }
            },
            {
              "name": "Setup - Freeze Target Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Target account frozen\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// Switch to User 2's token to freeze their account",
                      "pm.request.headers.add({",
                      "    key: 'Authorization',",
                      "    value: 'Bearer ' + pm.collectionVariables.get('auth_token_2')",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{auth_token_2}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"status\": \"FROZEN\",\n    \"statusChangeReason\": \"Testing transfers to frozen account\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{target_account_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{target_account_id}}"]
                },
                "description": "Setup: Freeze the target account"
              }
            },
            {
              "name": "Transfer to Frozen Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Transfer to frozen account succeeds\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Frozen accounts can receive transfers\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.status).to.eql('COMPLETED');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": 75.00,\n    \"description\": \"Payment to frozen account (debt recovery)\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test: Transfer to frozen account should succeed (for debt recovery)"
              }
            },
            {
              "name": "Cleanup - Unfreeze Target Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Target account reactivated\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// Use User 2's token",
                      "pm.request.headers.add({",
                      "    key: 'Authorization',",
                      "    value: 'Bearer ' + pm.collectionVariables.get('auth_token_2')",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{auth_token_2}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"status\": \"ACTIVE\",\n    \"statusChangeReason\": \"Test completed\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{target_account_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{target_account_id}}"]
                },
                "description": "Cleanup: Reactivate target account"
              }
            }
          ]
        },
        {
          "name": "🔄 Workflow Tests",
          "item": [
            {
              "name": "Complete Transfer Chain",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Transfer chain step completes\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Chain maintains consistency\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.sourceTransaction).to.exist;",
                      "    pm.expect(jsonData.targetTransaction).to.exist;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": 200.00,\n    \"description\": \"Transfer chain step 1: A to B\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test: Multi-step transfer chain maintains consistency"
              }
            },
            {
              "name": "Account Lifecycle with Transfers",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Account lifecycle test\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Transfer through account states\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.status).to.eql('COMPLETED');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"sourceAccountId\": \"{{source_account_id}}\",\n    \"targetAccountId\": \"{{target_account_id}}\",\n    \"amount\": 25.00,\n    \"description\": \"Lifecycle test transfer\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/transfers",
                  "host": ["{{base_url}}"],
                  "path": ["transfers"]
                },
                "description": "Test: Transfers work correctly through account status changes"
              }
            }
          ]
        }
      ],
      "description": "Complete test coverage for transfer feature including all edge cases and business rules"
    },
    {
      "name": "4. Core Operations",
      "item": [
        {
          "name": "Users",
          "item": [
            {
              "name": "Get User Profile",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/users/{{user_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["users", "{{user_id}}"]
                }
              }
            },
            {
              "name": "Update User",
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstName\": \"John Updated\",\n    \"phoneNumber\": \"+1234567899\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/users/{{user_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["users", "{{user_id}}"]
                }
              }
            }
          ]
        },
        {
          "name": "Accounts",
          "item": [
            {
              "name": "Get All Accounts",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/accounts",
                  "host": ["{{base_url}}"],
                  "path": ["accounts"]
                }
              }
            },
            {
              "name": "Get Account by ID",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/accounts/{{account_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{account_id}}"]
                }
              }
            }
          ]
        },
        {
          "name": "Transactions",
          "item": [
            {
              "name": "Create Deposit",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"transactionType\": \"DEPOSIT\",\n    \"amount\": 1000.00,\n    \"description\": \"Salary deposit\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{account_id}}", "transactions"]
                }
              }
            },
            {
              "name": "Create Withdrawal",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"transactionType\": \"WITHDRAWAL\",\n    \"amount\": 200.00,\n    \"description\": \"ATM withdrawal\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/accounts/{{account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{account_id}}", "transactions"]
                }
              }
            },
            {
              "name": "Get Transaction History",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/accounts/{{account_id}}/transactions",
                  "host": ["{{base_url}}"],
                  "path": ["accounts", "{{account_id}}", "transactions"]
                }
              }
            }
          ]
        }
      ]
    },
    {
      "name": "5. Admin Operations",
      "item": [
        {
          "name": "Get All Users (Admin)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/admin/users",
              "host": ["{{base_url}}"],
              "path": ["admin", "users"]
            }
          }
        },
        {
          "name": "Get System Metrics",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/metrics",
              "host": ["{{base_url}}"],
              "path": ["metrics"]
            }
          }
        }
      ]
    },
    {
      "name": "6. Audit & Analytics",
      "item": [
        {
          "name": "Get Audit Logs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/audit?page=0&size=20",
              "host": ["{{base_url}}"],
              "path": ["audit"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "20"
                }
              ]
            }
          }
        },
        {
          "name": "Get Account Analytics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/accounts/{{account_id}}/analytics",
              "host": ["{{base_url}}"],
              "path": ["accounts", "{{account_id}}", "analytics"]
            }
          }
        }
      ]
    }
  ]
}