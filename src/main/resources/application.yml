spring:
  application:
    name: eagle-bank-api
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        format_sql: true
        jdbc:
          lob:
            non_contextual_creation: true
    show-sql: false
    open-in-view: false
  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

server:
  port: 8080
  servlet:
    context-path: /api

jwt:
  secret: ${JWT_SECRET:your-secret-key-change-in-production}
  expiration: 900000 # 15 minutes in milliseconds (reduced from 24 hours)
  refresh:
    expiration: 604800000 # 7 days in milliseconds
  rsa:
    private-key: ${JWT_RSA_PRIVATE_KEY:}
    public-key: ${JWT_RSA_PUBLIC_KEY:}
  encryption:
    rsa:
      # Separate RSA keys for JWE encryption (distinct from signing keys)
      private-key: ${JWT_ENCRYPTION_RSA_PRIVATE_KEY:}
      public-key: ${JWT_ENCRYPTION_RSA_PUBLIC_KEY:}
    # JWE (JSON Web Encryption) adds encryption on top of signed JWTs
    # When enabled, tokens become 5-part JWE format instead of 3-part JWT
    # This hides token contents from clients (user ID, email, roles not visible)
    # To enable JWE encryption, set to true (or set JWT_ENCRYPTION_ENABLED=true)
    enabled: ${JWT_ENCRYPTION_ENABLED:false} # Set to true to enable JWE encryption
    # Key encryption algorithm (how the AES key is encrypted)
    # Options: RSA-OAEP, RSA-OAEP-256, RSA1_5
    algorithm: ${JWT_ENCRYPTION_ALGORITHM:RSA-OAEP-256}
    # Content encryption algorithm (how the JWT payload is encrypted)  
    # Options: A128GCM, A192GCM, A256GCM, A128CBC-HS256, A256CBC-HS512
    content-algorithm: ${JWT_ENCRYPTION_CONTENT_ALGORITHM:A256GCM}

logging:
  level:
    com.eaglebank: DEBUG
    org.springframework.web: INFO
    org.springframework.security: DEBUG

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    tryItOutEnabled: true
    filter: true
    operationsSorter: method
    tagsSorter: alpha
    displayRequestDuration: true
  show-actuator: false

# Security configurations
security:
  login:
    max-attempts: 5
    lockout-duration-minutes: 30

# Rate limiting configurations
rate-limiting:
  authenticated:
    capacity: 100
    tokens: 100
    period: 60
  anonymous:
    capacity: 20
    tokens: 20
    period: 60
  ip-based: true

# CORS configuration
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}

# Actuator configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
  prometheus:
    metrics:
      export:
        enabled: true